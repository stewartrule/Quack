{"name":"Quack","tagline":"validate object paths and values","body":"## Quack\r\n\r\nQuack helps you to validate object structures and values.\r\n\r\nIt has a dependency on [underscore.js](http://underscorejs.org/) and is still under development.\r\n\r\n\r\n#### Consider this dummy object\r\n```js\r\nvar config = {\r\n    media: {\r\n        align: {\r\n            vertical: {\r\n                x: 'center',\r\n                y: 50\r\n            },\r\n            horizontal: {\r\n                x: 'center',\r\n                y: 100\r\n            }\r\n        },\r\n        src: '/base/media/image/',\r\n        ratios: [1, 2, 3, 4, 5, 6]\r\n    },\r\n    resources: {\r\n        css: {\r\n            base: '/static/css/',\r\n            files: [\r\n                'media-element.min.css',\r\n                'app.combined.min.css'\r\n            ]\r\n        },\r\n    },\r\n    colors: {\r\n        header: '#ff6600',\r\n        body: '#0a0',\r\n        footer: '1232ai'\r\n    },\r\n    api: {\r\n        book: {\r\n            getCosts: function () {},\r\n            getTitle: function () {},\r\n            getEan: function () {}\r\n        }\r\n    },\r\n    user: {\r\n        name: 'Wallie',\r\n        email: 'foobar@baz.com',\r\n        zipcode: '1211BL'\r\n    },\r\n    security: {\r\n        ip: {\r\n            blocked: [\r\n                '127.0.0.1',\r\n                '192.0.2.197'\r\n            ]\r\n        },\r\n        companies: [\r\n            'Samsung',\r\n            'Philips',\r\n            'LG'\r\n        ]\r\n    },\r\n    coordinates: {\r\n        x: 10,\r\n        y: 30,\r\n        z: 90\r\n    },\r\n    version: 1.2,\r\n    environment: 'production',\r\n    debug: false,\r\n    displayErrors: true\r\n};\r\n```\r\n\r\n\r\n### Checking multiple paths\r\n* validate(object, path, map)\r\n\r\n```js\r\nvar valid = quack.validate(config, 'media', {\r\n    align: quack.OBJECT,\r\n    'align.vertical.y': quack.NUMBER,\r\n    src: quack.STRING,\r\n    ratios: quack.ARRAY\r\n});\r\n// true\r\n```\r\n* validate(object, map)\r\n\r\n```js\r\nvar valid = quack.validate(config, {\r\n    'media.align': {\r\n        vertical: {\r\n            x: quack.STRING,\r\n            y: quack.NUMBER\r\n        }\r\n    },\r\n    colors: {\r\n        header: quack.HEX\r\n    },\r\n    'api.book.getEan': quack.FUNCTION\r\n});\r\n// true\r\n```\r\n\r\n```js\r\nvar valid = quack.validate(config, {\r\n    'user.name': /^[a-zA-Z]+$/,\r\n    'media.src': /^[a-z\\/]+$/\r\n});\r\n// true\r\n```\r\n\r\n#### Test array and object values\r\n```js\r\n// security.ip.blocked should contain an array with only ips\r\nvar valid = quack.validate(config, 'security.ip', {\r\n    blocked: quack.all(quack.validator.regexp.Ip)\r\n});\r\n\r\n// companies should contain at least one entry with the string 'Philips'\r\nvar valid = quack.validate(config, 'security', {\r\n    companies: quack.any(/^Philips$/)\r\n});\r\n\r\n// resources.css.files should contain only css filenames\r\nvar valid = quack.validate(config, 'resources.css', {\r\n    files: quack.all(/^[a-z0-9\\-\\_\\.\\/]+.css$/)\r\n});\r\n\r\n// config.coordinates should only contains numbers\r\nvar valid = quack.validate(config, {\r\n    coordinates: quack.all(_.isNumber)\r\n});\r\n\r\n// company only valid if it's present in the whitelist\r\nvar valid = quack.validate(config, 'security', {\r\n    companies: quack.whitelist(['LG', 'Philips', 'Samsung'])\r\n});\r\n\r\n// company only valid if it's not in the blacklist\r\nvar valid = quack.validate(config, 'security', {\r\n    companies: quack.blacklist(['xSamsung', 'xPhilips'])\r\n});\r\n\r\n// coordinates are only valid between 10 and 90 (inclusive)\r\nvar valid = quack.validate(config, {\r\n    coordinates: quack.range(10, 90)\r\n});\r\n```\r\n\r\n\r\n#### Available constants\r\n* FUNCTION\r\n* OBJECT\r\n* ARRAY\r\n* NUMBER\r\n* STRING\r\n* BOOLEAN\r\n* DATE\r\n* REGEXP\r\n* ELEMENT\r\n* EMAIL\r\n* ZIPCODE\r\n* HEX\r\n* IP\r\n* SLUG\r\n\r\n\r\n### Checking a single path\r\n\r\n* isArray(object, path)\r\n* isBoolean(object, path)\r\n* isDate(object, path)\r\n* isElement(object, path)\r\n* isFunction(object, path)\r\n* isNumber(object, path)\r\n* isObject(object, path)\r\n* isRegExp(object, path)\r\n\r\n```js\r\nvar res = quack.isNumber(config, 'resources.js.files');\r\n// false\r\n\r\nvar res = quack.isArray(config, 'resources.js.files');\r\n// true\r\n```\r\n\r\n### Pattern checking\r\n\r\n* isEmail(object, path)\r\n* isHex(object, path)\r\n* isIp(object, path)\r\n* isSlug(object, path)\r\n* isString(object, path)\r\n* isZipcode(object, path)\r\n\r\n```js\r\nvar valid = quack.isEmail(config, 'user.email');\r\n// true\r\n```\r\n\r\n### Custom regexp\r\n\r\n* test(object, path, regExp)\r\n\r\n```js\r\nvar match = quack.test(\r\n    config,\r\n    'resources.css.files.1',\r\n    /^app([a-z0-9\\._\\-]+)css$/\r\n);\r\n// true\r\n```\r\n\r\n### Check for an interface or API\r\n\r\n* hasApi(object, path, methods)\r\n* hasApi(object, methods)\r\n\r\n```js\r\nvar hasApi = quack.hasApi(\r\n    config,\r\n    'api.book',\r\n    ['getCosts', 'getTitle', 'getEan']\r\n);\r\n// true\r\n```\r\n\r\nor\r\n\r\n```js\r\nvar hasApi = quack.hasApi(\r\n    config.api.book,\r\n    ['getCosts', 'getTitle', 'getEan']\r\n);\r\n// true\r\n```\r\n\r\n```js\r\nfunction orderableProduct(instance) {\r\n    return quack.hasApi(instance, ['order', 'getProductId']);\r\n}\r\n\r\nif (orderableProduct(something)) {\r\n    something.order();\r\n}\r\n```\r\n\r\n### Get nested property\r\n\r\n* get(object, path)\r\n\r\n```js\r\nvar name = quack.get(config, 'user.name');\r\n```\r\n\r\n* clone(object, path)\r\n\r\n```js\r\n// same as get but creates a shallow clone of objects\r\nvar book = quack.clone(config, 'api.book');\r\n```\r\n\r\n### Manipulate\r\n\r\n* set(object, path, val)\r\n```js\r\nquack.set(config, 'x.y.z', 'alphabet soup');\r\n\r\nvar res = quack.get(config, 'x.y.z');\r\n// 'alphabet soup'\r\n```\r\n\r\n\r\n### Validator\r\n\r\nfor quick value checks you can also use the validator that quack uses internally\r\n\r\n```js\r\nvar validator = quack.validator;\r\n\r\nvalidator.isEmail('foobar@baz.com');\r\nvalidator.isHex('#ff6600');\r\nvalidator.isZipcode('1211AB');\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}