{"name":"Quack","tagline":"validate object paths and values","body":"## Quack\r\n\r\nQuack helps you to validate object structures and values.\r\n\r\nIt has a dependency on [underscore.js](http://underscorejs.org/) and is still under development.\r\n\r\n#### Consider this dummy object\r\n```js\r\nvar config = {\r\n    media: {\r\n        align: {\r\n            vertical: {\r\n                x: 'center',\r\n                y: 'top'\r\n            },\r\n            horizontal: {\r\n                x: 'center',\r\n                y: 'top'\r\n            }\r\n        },\r\n        src: '/base/media/image/',\r\n        ratios: [1, 2, 3, 4, 5, 6]\r\n    },\r\n    resources: {\r\n        css: {\r\n            base: '/static/css/',\r\n            files: [\r\n                'media-element.min.css',\r\n                'app.combined.min.css'\r\n            ]\r\n        },\r\n    },\r\n    colors: {\r\n        header: '#ff6600',\r\n        body: '#0a0',\r\n        footer: '1232ai'\r\n    },\r\n    api: {\r\n        book: {\r\n            getCosts: function () {},\r\n            getTitle: function () {},\r\n            getEan: function () {}\r\n        }\r\n    },\r\n    user: {\r\n        name: 'Wallie',\r\n        email: 'foobar@baz.com',\r\n        zipcode: '1211BL'\r\n    },\r\n    version: 1.2,\r\n    dev: 'production'\r\n};\r\n```\r\n\r\n\r\n### Checking multiple paths\r\n* validate(object, path, map)\r\n\r\n```js\r\nvar valid = quack.validate(config, 'media', {\r\n    align: quack.OBJECT,\r\n    'align.vertical.y': quack.STRING,\r\n    src: quack.STRING,\r\n    ratios: quack.ARRAY\r\n});\r\n// true\r\n```\r\n* validate(object, map)\r\n\r\n```js\r\nvar valid = quack.validate(config, {\r\n    'media.align': {\r\n        vertical: {\r\n            x: quack.STRING,\r\n            y: quack.NUMBER\r\n        }\r\n    },\r\n    colors: {\r\n        header: quack.HEX\r\n    },\r\n    'api.book.getEan': quack.FUNCTION\r\n});\r\n// true\r\n```\r\n\r\n```js\r\nvar valid = quack.validate(config, {\r\n    'user.name': /^[a-zA-Z]+$/,\r\n    'media.src': /^[a-z\\/]+$/\r\n});\r\n// true\r\n```\r\n\r\n#### Available constants\r\n* FUNCTION\r\n* OBJECT\r\n* ARRAY\r\n* NUMBER\r\n* STRING\r\n* BOOLEAN\r\n* DATE\r\n* REGEXP\r\n* ELEMENT\r\n* EMAIL\r\n* ZIPCODE\r\n* HEX\r\n* IP\r\n* SLUG\r\n\r\n\r\n### Checking a single path\r\n\r\n* isArray(object, path)\r\n* isBoolean(object, path)\r\n* isDate(object, path)\r\n* isElement(object, path)\r\n* isFunction(object, path)\r\n* isNumber(object, path)\r\n* isObject(object, path)\r\n* isRegExp(object, path)\r\n\r\n```js\r\nvar res = quack.isNumber(config, 'resources.js.files');\r\n// false\r\n\r\nvar res = quack.isArray(config, 'resources.js.files');\r\n// true\r\n```\r\n\r\n### Pattern checking\r\n\r\n* isEmail(object, path)\r\n* isHex(object, path)\r\n* isIp(object, path)\r\n* isSlug(object, path)\r\n* isString(object, path)\r\n* isZipcode(object, path)\r\n\r\n```js\r\nvar valid = quack.isEmail(config, 'user.email');\r\n// true\r\n```\r\n\r\n### Custom regexp\r\n\r\n* test(object, path, regExp)\r\n\r\n```js\r\nvar match = quack.test(\r\n    config,\r\n    'resources.css.files.1',\r\n    /^app([a-z0-9\\._\\-]+)css$/\r\n);\r\n// true\r\n```\r\n\r\n### Check for an interface or API\r\n\r\n* hasApi(object, path, methods)\r\n* hasApi(object, methods)\r\n\r\n```js\r\nvar hasApi = quack.hasApi(\r\n    config,\r\n    'api.book',\r\n    ['getCosts', 'getTitle', 'getEan']\r\n);\r\n// true\r\n```\r\n\r\nor\r\n\r\n```js\r\nvar hasApi = quack.hasApi(\r\n    config.api.book,\r\n    ['getCosts', 'getTitle', 'getEan']\r\n);\r\n// true\r\n```\r\n\r\n```js\r\nfunction orderableProduct(instance) {\r\n    return quack.hasApi(instance, ['order', 'getProductId']);\r\n}\r\n\r\nif (orderableProduct(something)) {\r\n    something.order();\r\n}\r\n```\r\n\r\n### Get nested property\r\n\r\n* get(object, path)\r\n\r\n```js\r\nvar name = '';\r\nif (quack.isString(config, 'user.name')) {\r\n    name = quack.get(config, 'user.name');\r\n}\r\n```\r\n\r\n### Manipulate\r\n\r\n* set(object, path, val)\r\n```js\r\nquack.set(config, 'x.y.z', 'alphabet soup');\r\n\r\nvar res = quack.get(config, 'x.y.z');\r\n// 'alphabet soup'\r\n```\r\n\r\n* clone(object, src, dest)\r\n\r\n\r\n### Validator\r\n\r\nfor quick value checks you can also use the validator that quack uses internally\r\n\r\n```js\r\nvar validator = quack.validator;\r\n\r\nvalidator.isEmail('foobar@baz.com');\r\nvalidator.isHex('#ff6600');\r\nvalidator.isZipcode('1211AB');\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}